# import libraries
import pandas as pd
from sklearn.model_selection import train_test_split
import numpy as np
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import MinMaxScaler
from sklearn.dummy import DummyClassifier
from sklearn.ensemble import BaggingClassifier, RandomForestClassifier, VotingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
import pydotplus
from sklearn import tree
import matplotlib.pyplot as plt
from sklearn.ensemble import AdaBoostClassifier


# import & explore dataset
from google.colab import files 
uploaded = files.upload()
data = pd.read_csv('fluvaccine.csv')
frame = pd.DataFrame(data)

# create dummy variables for categorical data and drop unnecessary columns
frame.drop(['respondent_id','hhs_geo_region', 'doctor_recc_h1n1','opinion_h1n1_vacc_effective','opinion_h1n1_risk','opinion_h1n1_sick_from_vacc','census_msa','employment_industry','employment_occupation'],axis = 1, inplace = True)
frame = pd.get_dummies(frame, columns=['age_group', 'race', 'education', 'sex','income_poverty', 'marital_status', 'rent_or_own', 'employment_status'])
frame.fillna(0, inplace=True)

# normalize data
values = frame.values
imputer = SimpleImputer(missing_values=np.nan, strategy='mean')
imputedData = imputer.fit_transform(values)

scaler = MinMaxScaler(feature_range=(0, 1))
normalizedData = scaler.fit_transform(imputedData)
cols = ['h1n1_concern', 'h1n1_knowledge', 'behavioral_antiviral_meds', 'behavioral_avoidance', 'behavioral_face_mask', 'behavioral_wash_hands', 'behavioral_large_gatherings', 'behavioral_outside_home', 'behavioral_touch_face','doctor_recc_seasonal','chronic_med_condition','child_under_6_months','health_worker','health_insurance','opinion_seas_vacc_effective','opinion_seas_risk','opinion_seas_sick_from_vacc','household_adults','household_children','h1n1_vaccine','seasonal_vaccine','age_group_18 - 34 Years','age_group_35 - 44 Years','age_group_45 - 54 Years','age_group_55 - 64 Years','age_group_65+ Years','race_Black','race_Hispanic','race_Other or Multiple','race_White','education_12 Years','education_< 12 Years','education_College Graduate','education_Some College','sex_Female','sex_Male','income_poverty_<= $75,000, Above Poverty','income_poverty_> $75,000','income_poverty_Below Poverty','marital_status_Married','marital_status_Not Married','rent_or_own_Own','rent_or_own_Rent','employment_status_Employed','employment_status_Not in Labor Force','employment_status_Unemployed']
normalizedData = pd.DataFrame(normalizedData, columns=cols)

# set feature variables X and target (response) variable y
X = frame.loc[:, 'h1n1_concern':'employment_status_Unemployed']
y = frame['seasonal_vaccine']

# split up testing and training data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=2020, stratify=y)

# print accuracy
dummy_classifier = DummyClassifier(strategy='most_frequent')
dummy_classifier.fit(X_train,y_train)
baseline_acc = dummy_classifier.score(X_test,y_test)

print("Baseline Accuracy = ", baseline_acc)


# Decision Tree

dt = DecisionTreeClassifier(criterion='entropy', max_depth=4, random_state=42)
dt.fit(X_train, y_train)
y_pred = dt.predict(X_test)

# print training accuracy
training_pred = dt.predict(X_train)
acc_training = accuracy_score(training_pred, y_train)
print("Training Accuracy:", acc_training)

# print testing accuracy
acc_testing = accuracy_score(y_pred, y_test)
print("Testing Accuracy: ", acc_testing)

# show tree
fn = X.columns
plt.figure(figsize=(50,50))
ystring = str(y)
# cn = ystring.unique()
a = tree.plot_tree(dt, feature_names=fn, class_names=ystring, filled=True)
plt.show()


# Bagging

model_bagging = BaggingClassifier(base_estimator=DecisionTreeClassifier(), random_state=42)
model_bagging.fit(X_train, y_train)
pred_bagging = model_bagging.predict(X_test)
acc_bagging = accuracy_score(y_test, pred_bagging)
print('Testing Accuracy = ', acc_bagging)


# RandomForest

model_rf = RandomForestClassifier(n_estimators=100, max_features=7, random_state=42)
model_rf.fit(X_train, y_train)
predict_rf = model_rf.predict(X_test)
print('Testing Accuracy = ', accuracy_score(y_test, predict_rf))

# top 5 important features
feature_importances = model_rf.feature_importances_
features = X_train.columns
df = pd.DataFrame({'features': features, 'importance': feature_importances})
df = df.sort_values(by='importance', ascending=False)
print(df.iloc[0:5, :])



# AdaBoost

base_est = DecisionTreeClassifier(max_depth=4)
ada_boost = AdaBoostClassifier(base_est, n_estimators=200, random_state=42, learning_rate=.05)
ada_boost.fit(X_train, y_train)
print("Testing Accuracy =", accuracy_score(y_test, ada_boost.predict(X_test)))

# top 5 important features
feature_importances = ada_boost.feature_importances_
features = X_train.columns
df = pd.DataFrame({'features': features, 'importance': feature_importances})
df = df.sort_values(by='importance', ascending=False)
print(df.iloc[0:5, :])
